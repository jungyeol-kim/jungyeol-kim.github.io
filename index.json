[{"authors":null,"categories":null,"content":"I\u0026rsquo;m a PhD candidate in the department of Electrical and Systems Engineering at the University of Pennsylvania; also pursuing a dual Master\u0026rsquo;s degree in Statistics at the Wharton School. Before coming to Penn, I obtained my bachelor\u0026rsquo;s and master\u0026rsquo;s degrees in Physics from Korea University.\n  Download my resum√©.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://jungyeol-kim.github.io/author/jungyeol-kim/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jungyeol-kim/","section":"authors","summary":"I\u0026rsquo;m a PhD candidate in the department of Electrical and Systems Engineering at the University of Pennsylvania; also pursuing a dual Master\u0026rsquo;s degree in Statistics at the Wharton School. Before coming to Penn, I obtained my bachelor\u0026rsquo;s and master\u0026rsquo;s degrees in Physics from Korea University.","tags":null,"title":"Jungyeol Kim","type":"authors"},{"authors":null,"categories":null,"content":"Âê≥ÊÅ©ÈÅî is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"da99cb196019cc5857b9b3e950397ca9","permalink":"https://jungyeol-kim.github.io/author/%E5%90%B3%E6%81%A9%E9%81%94/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","section":"authors","summary":"Âê≥ÊÅ©ÈÅî is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Âê≥ÊÅ©ÈÅî","type":"authors"},{"authors":null,"categories":null,"content":"   Table of Contents    What you will learn Program overview Courses in this program Meet your instructor FAQs      What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Jungyeol Kim FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://jungyeol-kim.github.io/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"üìä Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, 'Hello world']  Tuples\n Tuples are immutable - they can\u0026rsquo;t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, 'Hello world')   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"https://jungyeol-kim.github.io/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026quot;country == 'Canada'\u0026quot;) fig = px.bar(data_canada, x='year', y='pop') fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"https://jungyeol-kim.github.io/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"https://jungyeol-kim.github.io/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://jungyeol-kim.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Jungyeol Kim","Âê≥ÊÅ©ÈÅî"],"categories":["Demo","ÊïôÁ®ã"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It\u0026rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  üëâ Create a new site üìö Personalize your site üí¨ Chat with the Wowchemy community or Hugo community üê¶ Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy üí° Request a feature or report a bug for Wowchemy ‚¨ÜÔ∏è Updating Wowchemy? View the Update Guide and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n‚ù§Ô∏è Click here to become a sponsor and help support Wowchemy\u0026rsquo;s future ‚ù§Ô∏è As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features ü¶Ñ‚ú®\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, ‰∏≠Êñá, and Portugu√™s Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://jungyeol-kim.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome üëã We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","ÂºÄÊ∫ê"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":null,"categories":["R"],"content":"Exploratory Data Analysis We remove $49 $ genes (features) from the raw data since the genes has no value across all samples. We then standardize the data before performing (sparse) principal component analysis. Figure 1 and 2 provide summary statistics. Figure 1 represents the number of samples available for each of the tissues, and Figure 2 represents the number of tissues provided by each of the donors.\n     Throughout this report, we use primary tissues (SMTS) rather than tissues (SMTSD) for simple visualization.\nPrincipal Component Analysis (PCA) We aim to see if the standard PCA can reveal the difference in gene expressions among different tissue types. We first perform PCA and compute the principal components.\nset.seed(2021) pca.results \u0026lt;- irlba::prcomp_irlba(final.data.scale, n=50, center = FALSE, scale. = FALSE) a\u0026lt;-summary(pca.results)$importance[2,1:35] b\u0026lt;-summary(pca.results)$importance[3,1:35] pc_var_expd\u0026lt;-data.frame('PC'=1:length(a), 'pct'=a, 'pct_cum'=b, stringsAsFactors = F) ggplot(data = pc_var_expd, aes(x = as.factor(PC))) + geom_col(aes(y = pct)) + geom_line(aes(y = pct_cum, group = 1)) + geom_hline(yintercept = 0.75, linetype=\u0026quot;dashed\u0026quot;, color = \u0026quot;gray50\u0026quot;, size=0.5) + geom_point(aes(y = pct_cum)) + labs(x = \u0026quot;Principal component\u0026quot;, y = \u0026quot;Proportion of Variance\u0026quot;) + scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75), limits = c(0, 0.755)) + theme_classic() + theme(axis.text.x = element_text(size = 18), axis.title.x=element_text(size=24, face=\u0026quot;bold\u0026quot;)) + theme(axis.text.y = element_text(size = 18), axis.title.y=element_text(size=24, face=\u0026quot;bold\u0026quot;))     We notice is that the first 35 components explains over $75% $ of variance. We can effectively reduce dimensionality from $19248 $ to $35 $ while only loosing about $25% $ of variance. We also notice that we can actually explain over $28% $ of variance with just the first two components and over $26% $ of variance with just the first and the third components. The pairwise scatter plot of principal components are displayed as follows. Figure 4(b) shows that, with only two components, we can clearly see separation of Brain, Pituitary, Blood, and Testis tissues from all others.\ntemp\u0026lt;-data.frame(pca.results$x, 'SMTS'=as.factor(final.data.orig$SMTS), 'SMTSD'=as.factor(final.data.orig$SMTSD)) gg_color_hue \u0026lt;- function(n) { hues = seq(15, 375, length = n + 1) hcl(h = hues, l = 65, c = 100)[1:n] } cols = gg_color_hue(length(levels(temp$SMTS))) fills = gg_color_hue(length(levels(temp$SMTS))) alphas = rep(0.2,length(levels(temp$SMTS))) # SMTS.select\u0026lt;-levels(temp$SMTS) SMTS.select\u0026lt;-c(\u0026quot;Brain\u0026quot;, \u0026quot;Blood\u0026quot;, \u0026quot;Testis\u0026quot;, \u0026quot;Pituitary\u0026quot;) c.color\u0026lt;-which(!levels(temp$SMTS) %in% SMTS.select) cols[c.color]\u0026lt;-\u0026quot;#A5A5A5\u0026quot; fills[c.color]\u0026lt;-\u0026quot;#A5A5A5\u0026quot; alphas[c.color]\u0026lt;-0 means \u0026lt;- temp %\u0026gt;% filter(SMTS %in% SMTS.select) %\u0026gt;% group_by(SMTS) %\u0026gt;% summarise(mean_PC1 = mean(PC1), mean_PC3 = mean(PC3)) ggplot(temp, aes(x = PC1, y = PC3, label = SMTS)) + geom_point(aes(colour = SMTS), size=0.5, alpha=0.7, show.legend = FALSE) + stat_ellipse(aes(fill = SMTS, alpha = SMTS), level = .95, geom = \u0026quot;polygon\u0026quot;, lty=0, show.legend = FALSE) + geom_label(data = means, aes(x = mean_PC1, y = mean_PC3, color = SMTS), show.legend = FALSE) + scale_colour_manual(values=cols) + scale_fill_manual(values=fills) + scale_alpha_manual(values=alphas) + theme_classic() + theme(axis.text.x = element_text(size = 17), axis.title.x=element_text(size=20, face=\u0026quot;bold\u0026quot;)) + theme(axis.text.y = element_text(size = 17), axis.title.y=element_text(size=20, face=\u0026quot;bold\u0026quot;)) @       Sparse PCA Since standard PCA does not impose sparsity constraints on the loadings of principal directions, principal components are usually linear combinations of all input features and the none of the loadings are zero in general as shown in Figure 6. However, in Sparse PCA, principal components are a linear combination of a subset of input features, which provides an improved interpretability of the model. Sparse PCA prevents overfitting in this data where the number of features, $p $, is greater than the number of observations, $N $.\nWe therefore use sparse PCA introduced by [1,2]. This Sparse PCA aims to minimize the following problem: $$\\text{min } f(A,B) = \\frac{1}{2} ||X - XBA^T||^2 + \\alpha ||B||_1 + \\frac{1}{2} \\beta ||B||^2, $$ $$\\text{ subject to } A^T A = I. $$ where the matrix B is the sparse weight (loadings) matrix and A is an orthonormal matrix. This uses the elastic net regularization. The principal components $Z $ are formed as $Z = XB $.\nset.seed(2021) sparsepca.results.0.3 \u0026lt;- sparsepca::rspca(final.data.scale, k=35, alpha=1e-3, beta=1e-3, center = FALSE, scale = FALSE) sparsepca.results.0.4 \u0026lt;- sparsepca::rspca(final.data.scale, k=35, alpha=1e-4, beta=1e-4, center = FALSE, scale = FALSE) pca.results \u0026lt;- irlba::prcomp_irlba(final.data.scale, n=50, center = FALSE, scale. = FALSE) num.zero.0.3\u0026lt;-vector() num.zero.0.4\u0026lt;-vector() num.zero.pca\u0026lt;-vector() num.zero.0.3[1]\u0026lt;-sum(sparsepca.results.0.3$loadings[,1]==0) num.zero.0.4[1]\u0026lt;-sum(sparsepca.results.0.4$loadings[,1]==0) num.zero.pca[1]\u0026lt;-sum(pca.results$rotation[,1]==0) for(i in 2:35){ PCs\u0026lt;-1:i num.zero.0.3[i]\u0026lt;-sum(rowSums(sparsepca.results.0.3$loadings[,PCs])==0) num.zero.0.4[i]\u0026lt;-sum(rowSums(sparsepca.results.0.4$loadings[,PCs])==0) num.zero.pca[i]\u0026lt;-sum(rowSums(pca.results$rotation[,PCs])==0) } plot(1:35, num.zero.0.3, xlab=\u0026quot;Number of Principle Components\u0026quot;, ylab=\u0026quot;Number of Common Features with Zero Coefficients across PC's\u0026quot;, type='o', lty=2, pch=1, cex.lab=1.6, cex.axis=1.3, ylim=c(0,19300)) points(1:35, num.zero.0.4, type='o', lty=3, pch=3, cex.lab=1.6, cex.axis=1.3, ylim=c(0,19300)) points(1:35, num.zero.pca, type='o', lty=1, pch=5, cex.lab=1.6, cex.axis=1.3, ylim=c(0,19300)) abline(h=19248, lty=3) text(25, 18500, labels = \u0026quot;Total number of features p=19248\u0026quot;, cex=1.3) text(25, 13500, labels = expression(paste(\u0026quot;Sparse PCA with \u0026quot;, alpha,\u0026quot;=\u0026quot;,10^-3,\u0026quot;, \u0026quot;, beta,\u0026quot;=\u0026quot;,10^-3)), cex=1.3) text(25, 5000, labels = expression(paste(\u0026quot;Sparse PCA with \u0026quot;, alpha,\u0026quot;=\u0026quot;,10^-4,\u0026quot;, \u0026quot;, beta,\u0026quot;=\u0026quot;,10^-4)), cex=1.3) text(25, 1000, labels = \u0026quot;PCA\u0026quot;, cex=1.3)     Figure 6 confirms that non-negligible number of features have zero coefficient across the principal components. For example, for Sparse PCA under the condition of $\\alpha=10^{-3} $ and $\\beta=10^{-3} $, $11518 $ features out of $p=19248 $ features have zero coefficients across the first $35 $ principal components. The number of features with zero coefficients across the PCs would decrease with the number of PCs, but there is a diminishing return. This indicates that the $11518 $ features are likely to be uninformative. Since $\\alpha $ is a sparsity controlling parameter and $\\beta $ controls the amount of ridge shrinkage, higher values of $\\alpha $ lead to sparser components. Refer to the two different results of sparse PCA with two different parameters in Figure 6.\nWe now plot Sparse PCA (with parameters $\\alpha=10^{-3} $ and $\\beta=10^{-3} $) to see if the Sparse PCA can reveal the difference in gene expressions among different tissue types. Figure 7 shows the pairwise scatter plots of the principal components. We can clearly see separation of Brain, Testis, Pituitary, Skin, Muscle, Heart, Blood Vessel, Nerve, Blood, Liver, Lung, Adipose Tissue, and Spleen tissues from all others.\n   [1] N. B. Erichson, P. Zheng, K. Manohar, S. L. Brunton, J. N. Kutz, and A. Y. Aravkin, ‚ÄúSparse principal component analysis via variable projection,‚Äù SIAM Journal on Applied Mathematics, vol. 80, no. 2, pp. 977‚Äì1002, 2020.\n[2] N. B. Erichson, ‚ÄúSpca via variable projection.‚Äù https://github.com/erichson/spca, 2018.\n","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"1eb8e0305a871f83aa449127f03d883a","permalink":"https://jungyeol-kim.github.io/post/sparse-pca/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/post/sparse-pca/","section":"post","summary":"Sparse PCA.","tags":["R","V2V","Network"],"title":"Dimensionality Reduction for High Dimensional Gene Expression Data","type":"post"},{"authors":null,"categories":["R"],"content":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'), col = c('#0292D8', '#F7EA39', '#C4B632'), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.\n ","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"84a876ba789bb7232be8d9ed2487fd98","permalink":"https://jungyeol-kim.github.io/post/2020-12-01-r-rmarkdown/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/post/2020-12-01-r-rmarkdown/","section":"post","summary":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":null,"categories":["R"],"content":"Theorem 1 on page 4 By the definition of Lasso, we have\n\\begin{align} \\frac{1}{2n} ||Y-X\\hat{\\beta}||_2^2 + \\lambda_n ||\\hat{\\beta}||_1 \\leq \\frac{1}{2n} ||Y-X{\\beta}^{\\star}||^2 + \\lambda_n ||{\\beta}^{\\star}||_1 \\end{align}\nWe use true model equation $ Y=X{\\beta}^{\\star}+\\epsilon $. By substituting $ Y $ for $ X{\\beta}^{\\star}+\\epsilon $, we have\n\\begin{align} \\frac{1}{2n} ||X (\\hat{\\beta}-\\beta^{\\star})||_2^2 \u0026amp; \\leq \\frac{\\epsilon^\\top X (\\hat{\\beta}-\\beta^{\\star})}{n} + \\lambda_n (||\\beta^{\\star}||_1-||\\hat{\\beta}||_1)\\\\\n\u0026amp; (\\text{by Holder\u0026rsquo;s Inequality, }\\epsilon^\\top X (\\hat{\\beta}-\\beta^{\\star}) = |\\sum_{i=1}^{d}(\\epsilon^\\top X)_i (\\hat{\\beta}-\\beta^{\\star})_i| \\leq ||\\epsilon^\\top X||_{\\infty} ||\\hat{\\beta}-\\beta^{\\star}||_1) \\nonumber \\\\ \u0026amp; \\leq \\frac{||\\epsilon^\\top X||_{\\infty} ||\\hat{\\beta}-\\beta^{\\star}||_1}{n} + \\lambda_n(||\\beta^{\\star}||_1-||\\hat{\\beta}||_1)\\\\\n\u0026amp; (\\text{by Triangle Inequality, }||\\hat{\\beta}-\\beta^{\\star}||_1 \\leq ||\\hat{\\beta}||_1 + ||-\\beta^{\\star}||_1 = ||\\hat{\\beta}||_1 + ||\\beta^{\\star}||_1) \\nonumber \\\\\n\u0026amp; \\leq \\frac{||X^\\top \\epsilon||_{\\infty}}{n} (||\\hat{\\beta}||_1 + ||\\beta^{\\star}||_1) + \\lambda_n(||\\beta^{\\star}||_1-||\\hat{\\beta}||_1)\\\\\n\u0026amp; = ||\\hat{\\beta}||_1 {\\underbrace{(\\frac{||X^\\top \\epsilon||_{\\infty}}{n} - \\lambda_n)}_{\\leq 0}} + ||{\\beta}^{\\star}||_1 {\\underbrace{(\\frac{||X^\\top \\epsilon||_{\\infty}}{n} + \\lambda_n)}_{\\leq 2\\lambda_n}} \\\\\n\u0026amp; (\\because \\frac{||X^\\top \\epsilon||_{\\infty}}{n} - \\lambda_n \\leq 0 \\text{ by the condition of the Theorem 1}) \\nonumber\\\\\n\u0026amp; \\leq ||\\beta^{\\star}||_1 \\cdot 2\\lambda_n \\label{eqn:2} \\end{align}\nSo we see the last expression $ \\frac{1}{n} ||X (\\hat{\\beta}-\\beta^{\\star})||_2^2 \\leq 4 ||\\beta^{\\star}||_1 \\lambda_n $. This finishes the proof.\nProbability bound of $ P\\left(\\frac{||X^\\top \\epsilon||_{\\infty}}{n}\\geq t\\right) $ on page 5 \\begin{align} P\\left(\\frac{||X^\\top \\epsilon||_{\\infty}}{n}\\geq t\\right) \u0026amp;= P\\left(\\frac{\\max_{j}|X_j^\\top \\epsilon|}{n}\\geq t\\right) \\\\\n\u0026amp;\\leq \\sum_{j=1}^d P\\left(\\frac{|X_j^\\top \\epsilon|}{n}\\geq t\\right) \\\\\n\u0026amp;\\leq \\sum_{j=1}^d {\\underbrace{P\\left(\\frac{X_j^\\top \\epsilon}{n}\\geq t\\right)}_{\\leq \\exp\\left[\\frac{-t^2n^2}{2\\sigma^2||X_j||_2^2} \\right]}} + {\\underbrace{P\\left(\\frac{X_j^\\top \\epsilon}{n}\\leq -t\\right)}_{\\leq \\exp\\left[\\frac{-t^2n^2}{2\\sigma^2||X_j||_2^2} \\right]}} \\\\\n\u0026amp; (\\text{by the two last results for sub-Gaussian r.v. on page 3})\\nonumber\\\\\n\u0026amp;\\leq \\sum_{j=1}^d 2 \\exp\\left[\\frac{-t^2n^2}{2\\sigma^2||X_j||_2^2} \\right] \\quad \\\\\n\u0026amp;\\leq 2d \\exp\\left[\\frac{-t^2n^2}{2\\sigma^2 nC} \\right] \\quad (\\text{by the assumption, } \\max_j||X_j||\\leq \\sqrt{nC})\\\\\n\u0026amp;=\\exp\\left[\\frac{-t^2n}{2\\sigma^2 C} + \\log 2d\\right] \\label{eqn:3} \\end{align} This finishes the proof.\n","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"64b1feccf9416fd0b44fedc1ebad94a6","permalink":"https://jungyeol-kim.github.io/post/lasso/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/post/lasso/","section":"post","summary":"Sparse PCA.","tags":["R","V2V","Network"],"title":"Lasso and Estimation Bound","type":"post"},{"authors":null,"categories":["R"],"content":"V2V technologies bridge two infrastructures: communication and transportation. These infrastructures are interconnected and interdependent. To capture this inter-dependence, which may vary in time and space, we propose a new methodology for modeling information propagation between V2V-enabled vehicles. The model is based on a continuous-time Markov chain which is shown to converge, under appropriate conditions, to a set of clustered epidemiological differential equations. The fraction of vehicles which have received a message, as a function of space and time may be obtained as a solution of these differential equations, which can be solved efficiently, independently of the number of vehicles.\nObjective: Our goal is to model the spread of V2V messages and obatin the fraction of vehicles which have received a message in arbitrary transportation networks, as a function of space and time, using a set of clustered epidemiological differential equations.\nMobility and Communicatoin Networks    As an example, we consider the grid road topology with six avenues and streets. In this network, we assume that all roads are two-way and allow vehicles to move in both directions, and a road segment consists of two clusters corresponding to the opposite directional roads. Since two clusters on the same road segment are sufficiently close to each other, we also assume that the vehicles located in these can communicate; there is an undirected edge between the two clusters on the same road segment.\nUnder these settings, we can create three aforementioned files that are essential for the vehicular messaging simulation using clustered epidemiological differential equations. The files I have already created under these assumptions can be downloaded from the following GitHub repository: https://github.com/jungyeol-kim/V2X-simulations.\nHowever, for any road topologies, vehicle movement patterns, and communication environment, you can use the software code below to automatically generate a set of clustered epidemiological differential equations corresponding to the given conditions, and perform V2V message propagation simulation using the generated differential equations.\nThe following sections describe the software code structure in detail using the sample input files provided based on the above road topology.\nImporting edge list of mobility network We import preset edge list of directed mobility network and corresponding mobility parameter $\\lambda_{ij} $.\nmobility_network\u0026lt;-read.csv(\u0026quot;mobility-network.csv\u0026quot;, header=T, as.is=T) mobility_network$lambda_from_to\u0026lt;-mobility_network$routing_prob*mobility_network$lambda  head(mobility_network) #View(mobility_network)  ## from_clust to_clust routing_prob lambda lambda_from_to ## 1 1 2 0.5 0.05 0.025 ## 2 1 36 0.5 0.05 0.025 ## 3 2 3 0.5 0.05 0.025 ## 4 2 41 0.5 0.05 0.025 ## 5 3 4 0.5 0.05 0.025 ## 6 3 46 0.5 0.05 0.025  Importing edge list of communication network We import preset edge list of undirected communication network and corresponding communication parameter $\\beta_{ij} $.\ncommunication_network\u0026lt;-read.csv(\u0026quot;communication-network.csv\u0026quot;, header=T, as.is=T) communication_network\u0026lt;-communication_network[order(communication_network$cluster_i, communication_network$cluster_j),] rownames(communication_network) \u0026lt;- NULL # reset row names  head(communication_network) #View(communication_network)  ## cluster_i cluster_j beta_ij ## 1 1 1 10 ## 2 1 61 10 ## 3 2 2 10 ## 4 2 62 10 ## 5 3 3 10 ## 6 3 63 10  Defining a neighborhood of a cluster We define a neighborhood of each cluster for both directed mobility network and undirected communication network.\ntotal.clusters\u0026lt;-120 mob.edge.out\u0026lt;-vector(mode='list',length=total.clusters) # outgoing edges from node i in the mobility network mob.edge.out.rate\u0026lt;-vector(mode='list',length=total.clusters) # mobility parameter of outgoing edges from node i in the mobility network mob.edge.in\u0026lt;-vector(mode='list',length=total.clusters) # incoming edges to node i in the mobility network mob.edge.in.rate\u0026lt;-vector(mode='list',length=total.clusters) # mobility parameter of incoming edges from node i in the mobility network comm.edge\u0026lt;-vector(mode='list',length=total.clusters) # undirected edges from or to node i in the communication network comm.edge.rate\u0026lt;-vector(mode='list',length=total.clusters) # communication parameter of undirected edges from or to node i in the communication network for (i in 1:total.clusters) { temp1\u0026lt;-mobility_network[mobility_network$from_clust==i,] temp2\u0026lt;-communication_network[communication_network$cluster_i==i,] mob.edge.out[[i]]\u0026lt;-temp1$to_clust mob.edge.out.rate[[i]]\u0026lt;-temp1$lambda_from_to comm.edge[[i]]\u0026lt;-temp2$cluster_j comm.edge.rate[[i]]\u0026lt;-temp2$beta_ij for(j in 1:length(mob.edge.out[[i]])){ mob.edge.in[[mob.edge.out[[i]][j]]]\u0026lt;-c(mob.edge.in[[mob.edge.out[[i]][j]]],i) mob.edge.in.rate[[mob.edge.out[[i]][j]]]\u0026lt;-c(mob.edge.in.rate[[mob.edge.out[[i]][j]]], mob.edge.out.rate[[i]][j]) } }  Quick exploration of the result\nmob.edge.out[[1]] #View(end point of outgoing edges from a given cluster 1)  ## [1] 2 36  mob.edge.out.rate[[1]] #View(mobility rates corresponding to outgoing edges from a given cluster 1)  ## [1] 0.025 0.025   Endpoints of outgoing edges for a given cluster (vertex) 1 are cluster 2 and 36. Mobility rate from cluster 1 to 2 is 0.25, and mobility rate from 1 to 36 is also 0.25.  mob.edge.in[[7]] #View(mobility_network)  ## [1] 6 36 97  mob.edge.in.rate[[7]] #View(communication_network)  ## [1] 0.01666667 0.01666667 0.01666667   Incoming edges to cluster 7 come from cluster 6, 36, and 97. Mobility rate from cluster 6 to 7 is 0.01666667, mobility rate from 36 to 7 is 0.25, and mobility rate from 97 to 7 is 0.25.  comm.edge[[25]] #View(mobility_network)  ## [1] 25 85  comm.edge.rate[[25]] #View(communication_network)  ## [1] 10 10   Vehicles in cluster 25 can communicate with other vehicles in the same cluster 25, and also communicate with vehicles in cluster 85. (intra- and inter-cluster communication) Intra-cluster communication parameter $\\beta_{25,25} $ is 10, and inter-cluster communication parameter $\\beta_{25,85} = \\beta_{85,25} $ corresponding to communication between cluster 10 and 70 is also 10.  Generation of Differential Equations Recall that under the conditions of our model, for a given choice of initial conditions $\\bigl({\\bf I}(0), {\\bf S}(0)\\bigr) $, the time-evolution, $\\bigl({\\bf I}(t), {\\bf S}(t)\\bigr) $, of the distribution of the asymptotic fraction of informed and non-informed vehicles across clusters is governed by the following system of ordinary differential equations:\n$$\\dot{I}_j(t)=-\\sum_{k\\neq j}^{J} \\lambda^I_{jk}\\left({\\bf{I,S}}\\right) \\cdot I_j + \\sum_{k=1}^{J}\\beta_{kj} \\cdot I_k\\cdot S_j + \\sum_{k\\neq j}^{J} \\lambda^I_{kj}\\left({\\bf{I,S}}\\right)\\cdot I_k \\qquad (j=1,2,\\dots,J), $$ $$ \\dot{S}_j(t)=-\\sum_{k\\neq j}^{J}\\lambda^S_{jk}\\left({\\bf{I,S}}\\right) \\cdot S_j - \\sum_{k=1}^{J}\\beta_{kj} \\cdot I_k \\cdot S_j + \\sum_{k\\neq j}^{J}\\lambda^S_{kj}\\left({\\bf{I,S}}\\right) \\cdot S_k \\qquad (j=1,2,\\dots,J). $$\nWe now create a set of clustered epidemiological differential equations for the given mobility and communicatoin networks. The number of variables and the total number of differential equations are $2J $ each (recall that $J $ is the total number of clusters). The $2J $-dimensional vector $(y_1,y_2,\u0026hellip;,y_J; y_{J+1},y_{J+2},\u0026hellip;,y_{2J})=(I_1,I_2,\u0026hellip;,I_J; S_1,S_2,\u0026hellip;,S_J) $ represent the instantaneous state of the system, semicolon and extra spacing have been added merely for visual separation of informed and non-informed vehicular counts in the various clusters.\nWe create the first summation term on right hand side The first summation terms on the RHS of the $j $ -th equation ($ \\dot{I}_j $) and the $J+j $ -th equation $(\\dot{S}_j) $ is related to the outgoing mobility from cluster $j $.\nmob.out.text\u0026lt;-vector(mode='character',length=total.clusters*2) for(i in 1:total.clusters){ mob.out.text.temp.1\u0026lt;-c(); mob.out.text.temp.2\u0026lt;-c(); mob.out.text.temp.3\u0026lt;-c(); mob.out.text.temp.4\u0026lt;-c() for(j in 1:length(mob.edge.out[[i]])){ mob.out.text.temp.1\u0026lt;-paste(\u0026quot;- \u0026quot;,mob.edge.out.rate[[i]][j],\u0026quot;*y[\u0026quot;,i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.out.text.temp.2\u0026lt;-paste(mob.out.text.temp.2,mob.out.text.temp.1,sep=\u0026quot; \u0026quot;) mob.out.text.temp.3\u0026lt;-paste(\u0026quot;- \u0026quot;,mob.edge.out.rate[[i]][j],\u0026quot;*y[\u0026quot;, total.clusters+i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.out.text.temp.4\u0026lt;-paste(mob.out.text.temp.4,mob.out.text.temp.3,sep=\u0026quot; \u0026quot;) } mob.out.text[i]\u0026lt;-mob.out.text.temp.2 mob.out.text[total.clusters+i]\u0026lt;-mob.out.text.temp.4 }  head(mob.out.text) #View(the first summation term on the RHS of each differential equation)  ## [1] \u0026quot; - 0.025*y[1] - 0.025*y[1]\u0026quot; ## [2] \u0026quot; - 0.025*y[2] - 0.025*y[2]\u0026quot; ## [3] \u0026quot; - 0.025*y[3] - 0.025*y[3]\u0026quot; ## [4] \u0026quot; - 0.025*y[4] - 0.025*y[4]\u0026quot; ## [5] \u0026quot; - 0.05*y[5]\u0026quot; ## [6] \u0026quot; - 0.01666666665*y[6] - 0.01666666665*y[6] - 0.01666666665*y[6]\u0026quot;  We create the second summation term on right hand side The second summation terms on the RHS of the $j $ -th equation ($ \\dot{I}_j $) and the $J+j $ -th equation $(\\dot{S}_j) $ is related to the intra- and inter-communication in cluster $j $.\ncomm.text\u0026lt;-vector(mode='character',length=total.clusters*2) for(i in 1:total.clusters){ comm.text.temp.1\u0026lt;-c(); comm.text.temp.2\u0026lt;-c(); comm.text.temp.3\u0026lt;-c(); comm.text.temp.4\u0026lt;-c() for(j in 1:length(comm.edge[[i]])){ comm.text.temp.1\u0026lt;-paste(comm.edge.rate[[i]][j],\u0026quot;*y[\u0026quot;,comm.edge[[i]][j],\u0026quot;]*y[\u0026quot;, total.clusters+i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) comm.text.temp.2\u0026lt;-paste(comm.text.temp.2,\u0026quot; + \u0026quot;,comm.text.temp.1,sep=\u0026quot;\u0026quot;) comm.text.temp.3\u0026lt;-paste(comm.edge.rate[[i]][j],\u0026quot;*y[\u0026quot;,comm.edge[[i]][j],\u0026quot;]*y[\u0026quot;, total.clusters+i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) comm.text.temp.4\u0026lt;-paste(comm.text.temp.4,\u0026quot; - \u0026quot;,comm.text.temp.3,sep=\u0026quot;\u0026quot;) } comm.text[i]\u0026lt;-comm.text.temp.2 comm.text[total.clusters+i]\u0026lt;-comm.text.temp.4 }  head(comm.text) #View(the second summation term on the RHS of each differential equation)  ## [1] \u0026quot; + 10*y[1]*y[121] + 10*y[61]*y[121]\u0026quot; \u0026quot; + 10*y[2]*y[122] + 10*y[62]*y[122]\u0026quot; ## [3] \u0026quot; + 10*y[3]*y[123] + 10*y[63]*y[123]\u0026quot; \u0026quot; + 10*y[4]*y[124] + 10*y[64]*y[124]\u0026quot; ## [5] \u0026quot; + 10*y[5]*y[125] + 10*y[65]*y[125]\u0026quot; \u0026quot; + 10*y[6]*y[126] + 10*y[66]*y[126]\u0026quot;  We create the third summation term on right hand side The third summation terms on the RHS of the $j $ -th equation ($ \\dot{I}_j $) and the $J+j $ -th equation $(\\dot{S}_j) $ is related to the incoming mobility to cluster $j $\nmob.in.text\u0026lt;-vector(mode='character',length=total.clusters*2) for(i in 1:total.clusters){ mob.in.text.temp.1\u0026lt;-c(); mob.in.text.temp.2\u0026lt;-c(); mob.in.text.temp.3\u0026lt;-c(); mob.in.text.temp.4\u0026lt;-c() for(j in 1:length(mob.edge.in[[i]])){ mob.in.text.temp.1\u0026lt;-paste(mob.edge.in.rate[[i]][j],\u0026quot;*y[\u0026quot;, mob.edge.in[[i]][j],\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.in.text.temp.2\u0026lt;-paste(mob.in.text.temp.2,\u0026quot; + \u0026quot;,mob.in.text.temp.1,sep=\u0026quot; \u0026quot;) mob.in.text.temp.3\u0026lt;-paste(mob.edge.in.rate[[i]][j],\u0026quot;*y[\u0026quot;, total.clusters+mob.edge.in[[i]][j],\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.in.text.temp.4\u0026lt;-paste(mob.in.text.temp.4,\u0026quot; + \u0026quot;,mob.in.text.temp.3,sep=\u0026quot; \u0026quot;) } mob.in.text[i]\u0026lt;-mob.in.text.temp.2 mob.in.text[total.clusters+i]\u0026lt;-mob.in.text.temp.4 }  head(mob.in.text) #View(the third summation term on the RHS of each differential equation)  ## [1] \u0026quot; + 0.05*y[91]\u0026quot; \u0026quot; + 0.025*y[1] + 0.025*y[96]\u0026quot; ## [3] \u0026quot; + 0.025*y[2] + 0.025*y[101]\u0026quot; \u0026quot; + 0.025*y[3] + 0.025*y[106]\u0026quot; ## [5] \u0026quot; + 0.025*y[4] + 0.025*y[111]\u0026quot; \u0026quot; + 0.025*y[31] + 0.025*y[92]\u0026quot;  We now combine the all terms to create the complete set of differential equations\ndy\u0026lt;-vector(mode='character',length=total.clusters*2) for (i in 1:(total.clusters*2)) { dy[i]\u0026lt;-paste(\u0026quot;dy\u0026quot;,i,\u0026quot; \u0026lt;- \u0026quot;,mob.out.text[i],mob.in.text[i],comm.text[i],sep=\u0026quot;\u0026quot;) }  head(dy) # View(complete set of differential equations)  ## [1] \u0026quot;dy1 \u0026lt;- - 0.025*y[1] - 0.025*y[1] + 0.05*y[91] + 10*y[1]*y[121] + 10*y[61]*y[121]\u0026quot; ## [2] \u0026quot;dy2 \u0026lt;- - 0.025*y[2] - 0.025*y[2] + 0.025*y[1] + 0.025*y[96] + 10*y[2]*y[122] + 10*y[62]*y[122]\u0026quot; ## [3] \u0026quot;dy3 \u0026lt;- - 0.025*y[3] - 0.025*y[3] + 0.025*y[2] + 0.025*y[101] + 10*y[3]*y[123] + 10*y[63]*y[123]\u0026quot; ## [4] \u0026quot;dy4 \u0026lt;- - 0.025*y[4] - 0.025*y[4] + 0.025*y[3] + 0.025*y[106] + 10*y[4]*y[124] + 10*y[64]*y[124]\u0026quot; ## [5] \u0026quot;dy5 \u0026lt;- - 0.05*y[5] + 0.025*y[4] + 0.025*y[111] + 10*y[5]*y[125] + 10*y[65]*y[125]\u0026quot; ## [6] \u0026quot;dy6 \u0026lt;- - 0.01666666665*y[6] - 0.01666666665*y[6] - 0.01666666665*y[6] + 0.025*y[31] + 0.025*y[92] + 10*y[6]*y[126] + 10*y[66]*y[126]\u0026quot;  dy_name\u0026lt;-c() for (i in 1:(total.clusters*2)) { if(i==1){dy_name\u0026lt;-paste(dy_name,\u0026quot;list(c(dy1\u0026quot;,sep=\u0026quot;\u0026quot;)} else if(i==(total.clusters*2)){dy_name\u0026lt;-paste(dy_name,\u0026quot;,dy\u0026quot;,total.clusters*2,\u0026quot;))}\u0026quot;,sep=\u0026quot;\u0026quot;)} else{dy_name\u0026lt;-paste(dy_name,\u0026quot;,\u0026quot;,paste(\u0026quot;dy\u0026quot;,i,sep=\u0026quot;\u0026quot;),sep=\u0026quot;\u0026quot;)} } set.diff.eqn\u0026lt;-c(\u0026quot;f \u0026lt;- function(t, y, parms) {\u0026quot;,dy,dy_name) write(set.diff.eqn, file = \u0026quot;set_diff_eqn.R\u0026quot;) source(\u0026quot;set_diff_eqn.R\u0026quot;)  Solving Differential Equations Initial condition We import preset initial conditions.\n# import preset initial condition initial_condition\u0026lt;-read.csv(\u0026quot;initial-condition.csv\u0026quot;, header=T, as.is=T) # initial condition: 2J-dimensional vector yini\u0026lt;-c(initial_condition$I_ini,initial_condition$S_ini)  The $2J $ -dimensional vector y_ini represent the state of the system at initial time.\nSolution of differential equations We create a function to encode the set of differential equations in a form suitable for use as the func argument to ode (numerical methods provided by the deSolve package).\nBefore we run, we need to set what are the timestamps used. times denote time sequence for which output is wanted.\nThe example below shows that the result will be generated every step.size=1 time unit, from 0 to sim.time=100 units.\nsim.time\u0026lt;-100 step.size\u0026lt;-1 times \u0026lt;- seq(from = 0, to = sim.time, by = step.size) # output wanted at these time intervals print(times)  ## [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## [19] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ## [37] 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 ## [55] 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 ## [73] 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 ## [91] 90 91 92 93 94 95 96 97 98 99 100  We then compute the fracton of informed vehicles over space and time by applying all into the ODE solver:\nout \u0026lt;- ode(times = times, y=yini, func = f, parms = NULL) # numerically solve the set of # differential equations solution\u0026lt;-out[,-1] rownames(solution)\u0026lt;-times # fraction of informed vehicles per cluster frac.inf.clust\u0026lt;-solution[,1:total.clusters] # fraction of non-informed vehicles per cluster frac.non.inf.clust\u0026lt;-solution[,(1+total.clusters):(2*total.clusters)] colnames(frac.non.inf.clust)\u0026lt;-1:total.clusters write.table(frac.inf.clust, file = \u0026quot;fraction_of_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file. write.table(frac.non.inf.clust, file = \u0026quot;fraction_of_non_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file.  Row names and Column names of frac.inf.clust and frac.non.inf.clust represent time and cluster respectively. For example, frac.inf.clust[rownames(frac.inf.clust)==10,25] (frac.non.inf.clust[rownames(frac.non.inf.clust)==10,25]) gives the fraction of informed (non-informed) vehicles at $t=10 $ in cluster 25. Naturally, multiplying the matrix frac.inf.clust (frac.non.inf.clust) by the total number of vehicles yields the number of informed (non-informed) vehicles in a given cluster at a given time.\nhead(frac.inf.clust[,1:5]) # View(fraction of informed vehicles at a given time in each cluster)  ## 1 2 3 4 5 ## 0 0.0008333330 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## 1 0.0008570283 2.153502e-05 2.742762e-07 3.458794e-09 4.070297e-11 ## 2 0.0008866241 4.467211e-05 1.129462e-06 2.138115e-08 3.472434e-10 ## 3 0.0009224916 6.983034e-05 2.639884e-06 7.020836e-08 1.509739e-09 ## 4 0.0009649812 9.741283e-05 4.886947e-06 1.667595e-07 4.435826e-09 ## 5 0.0010145891 1.280043e-04 8.000834e-06 3.369939e-07 1.088772e-08  We export the results to csv files in the current workspace.\nwrite.table(frac.inf.clust, file = \u0026quot;fraction_of_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file. write.table(frac.non.inf.clust, file = \u0026quot;fraction_of_non_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file.  Generating Figures Fraction of overall informed vehicles over time To study the degree of information propagation, we plot the fraction of overall vehicles that are informed at time t. A value of 1 on the y axis indicates that all vehicles in the system receive messages via V2V communication.\nfrac.inf.veh\u0026lt;-rowSums(solution[,1:total.clusters]) # fraction of overall vehicles # that are informed over time. plot(times,frac.inf.veh, xlab=\u0026quot;Time\u0026quot;, ylab=\u0026quot;Fraction of informed vehicles\u0026quot;)  Fraction of informed and non-informed vehicles over time per cluster\ncluster.specific\u0026lt;-10 # determine the specific cluster of interest. # fraction of informed vehicles over time in the particular cluster. frac.inf.veh.clust\u0026lt;-frac.inf.clust[,cluster.specific] # fraction of non-informed vehicles over time in the particular cluster. frac.non.inf.veh.clust\u0026lt;-frac.non.inf.clust[,cluster.specific] plot(times, frac.inf.veh.clust, xlab=\u0026quot;Time\u0026quot;, col=\u0026quot;black\u0026quot;, ylab=paste(\u0026quot;Fraction of (non)informed vehicles in cluster \u0026quot;,cluster.specific,sep = \u0026quot;\u0026quot;)) par(new=T) plot(times, frac.non.inf.veh.clust, xlab='', ylab='', col=\u0026quot;red\u0026quot;, axes=F) par(new=F) legend(0, 0.0025, legend=c(\u0026quot;Infomred\u0026quot;,\u0026quot;Non-infomred\u0026quot;), pch = c(1, 1), col=c(\u0026quot;black\u0026quot;,\u0026quot;red\u0026quot;))  ","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"d66f4f4bb169f898c89faa5fbf5d92ed","permalink":"https://jungyeol-kim.github.io/post/v2v/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/post/v2v/","section":"post","summary":"An example of using the in-built project page.","tags":["R","V2V","Network"],"title":"Vehicular Messaging Simulation","type":"post"},{"authors":null,"categories":["R"],"content":"V2V technologies bridge two infrastructures: communication and transportation. These infrastructures are interconnected and interdependent. To capture this inter-dependence, which may vary in time and space, we propose a new methodology for modeling information propagation between V2V-enabled vehicles. The model is based on a continuous-time Markov chain which is shown to converge, under appropriate conditions, to a set of clustered epidemiological differential equations. The fraction of vehicles which have received a message, as a function of space and time may be obtained as a solution of these differential equations, which can be solved efficiently, independently of the number of vehicles.\nObjective: Our goal is to model the spread of V2V messages and obatin the fraction of vehicles which have received a message in arbitrary transportation networks, as a function of space and time, using a set of clustered epidemiological differential equations.\nMobility and Communicatoin Networks    As an example, we consider the grid road topology with six avenues and streets. In this network, we assume that all roads are two-way and allow vehicles to move in both directions, and a road segment consists of two clusters corresponding to the opposite directional roads. Since two clusters on the same road segment are sufficiently close to each other, we also assume that the vehicles located in these can communicate; there is an undirected edge between the two clusters on the same road segment.\nUnder these settings, we can create three aforementioned files that are essential for the vehicular messaging simulation using clustered epidemiological differential equations. The files I have already created under these assumptions can be downloaded from the following GitHub repository: https://github.com/jungyeol-kim/V2X-simulations.\nHowever, for any road topologies, vehicle movement patterns, and communication environment, you can use the software code below to automatically generate a set of clustered epidemiological differential equations corresponding to the given conditions, and perform V2V message propagation simulation using the generated differential equations.\nThe following sections describe the software code structure in detail using the sample input files provided based on the above road topology.\nImporting edge list of mobility network We import preset edge list of directed mobility network and corresponding mobility parameter $\\lambda_{ij} $.\nmobility_network\u0026lt;-read.csv(\u0026quot;mobility-network.csv\u0026quot;, header=T, as.is=T) mobility_network$lambda_from_to\u0026lt;-mobility_network$routing_prob*mobility_network$lambda  head(mobility_network) #View(mobility_network)  ## from_clust to_clust routing_prob lambda lambda_from_to ## 1 1 2 0.5 0.05 0.025 ## 2 1 36 0.5 0.05 0.025 ## 3 2 3 0.5 0.05 0.025 ## 4 2 41 0.5 0.05 0.025 ## 5 3 4 0.5 0.05 0.025 ## 6 3 46 0.5 0.05 0.025  Importing edge list of communication network We import preset edge list of undirected communication network and corresponding communication parameter $\\beta_{ij} $.\ncommunication_network\u0026lt;-read.csv(\u0026quot;communication-network.csv\u0026quot;, header=T, as.is=T) communication_network\u0026lt;-communication_network[order(communication_network$cluster_i, communication_network$cluster_j),] rownames(communication_network) \u0026lt;- NULL # reset row names  head(communication_network) #View(communication_network)  ## cluster_i cluster_j beta_ij ## 1 1 1 10 ## 2 1 61 10 ## 3 2 2 10 ## 4 2 62 10 ## 5 3 3 10 ## 6 3 63 10  Defining a neighborhood of a cluster We define a neighborhood of each cluster for both directed mobility network and undirected communication network.\ntotal.clusters\u0026lt;-120 mob.edge.out\u0026lt;-vector(mode='list',length=total.clusters) # outgoing edges from node i in the mobility network mob.edge.out.rate\u0026lt;-vector(mode='list',length=total.clusters) # mobility parameter of outgoing edges from node i in the mobility network mob.edge.in\u0026lt;-vector(mode='list',length=total.clusters) # incoming edges to node i in the mobility network mob.edge.in.rate\u0026lt;-vector(mode='list',length=total.clusters) # mobility parameter of incoming edges from node i in the mobility network comm.edge\u0026lt;-vector(mode='list',length=total.clusters) # undirected edges from or to node i in the communication network comm.edge.rate\u0026lt;-vector(mode='list',length=total.clusters) # communication parameter of undirected edges from or to node i in the communication network for (i in 1:total.clusters) { temp1\u0026lt;-mobility_network[mobility_network$from_clust==i,] temp2\u0026lt;-communication_network[communication_network$cluster_i==i,] mob.edge.out[[i]]\u0026lt;-temp1$to_clust mob.edge.out.rate[[i]]\u0026lt;-temp1$lambda_from_to comm.edge[[i]]\u0026lt;-temp2$cluster_j comm.edge.rate[[i]]\u0026lt;-temp2$beta_ij for(j in 1:length(mob.edge.out[[i]])){ mob.edge.in[[mob.edge.out[[i]][j]]]\u0026lt;-c(mob.edge.in[[mob.edge.out[[i]][j]]],i) mob.edge.in.rate[[mob.edge.out[[i]][j]]]\u0026lt;-c(mob.edge.in.rate[[mob.edge.out[[i]][j]]], mob.edge.out.rate[[i]][j]) } }  Quick exploration of the result\nmob.edge.out[[1]] #View(end point of outgoing edges from a given cluster 1)  ## [1] 2 36  mob.edge.out.rate[[1]] #View(mobility rates corresponding to outgoing edges from a given cluster 1)  ## [1] 0.025 0.025   Endpoints of outgoing edges for a given cluster (vertex) 1 are cluster 2 and 36. Mobility rate from cluster 1 to 2 is 0.25, and mobility rate from 1 to 36 is also 0.25.  mob.edge.in[[7]] #View(mobility_network)  ## [1] 6 36 97  mob.edge.in.rate[[7]] #View(communication_network)  ## [1] 0.01666667 0.01666667 0.01666667   Incoming edges to cluster 7 come from cluster 6, 36, and 97. Mobility rate from cluster 6 to 7 is 0.01666667, mobility rate from 36 to 7 is 0.25, and mobility rate from 97 to 7 is 0.25.  comm.edge[[25]] #View(mobility_network)  ## [1] 25 85  comm.edge.rate[[25]] #View(communication_network)  ## [1] 10 10   Vehicles in cluster 25 can communicate with other vehicles in the same cluster 25, and also communicate with vehicles in cluster 85. (intra- and inter-cluster communication) Intra-cluster communication parameter $\\beta_{25,25} $ is 10, and inter-cluster communication parameter $\\beta_{25,85} = \\beta_{85,25} $ corresponding to communication between cluster 10 and 70 is also 10.  Generation of Differential Equations Recall that under the conditions of our model, for a given choice of initial conditions $\\bigl({\\bf I}(0), {\\bf S}(0)\\bigr) $, the time-evolution, $\\bigl({\\bf I}(t), {\\bf S}(t)\\bigr) $, of the distribution of the asymptotic fraction of informed and non-informed vehicles across clusters is governed by the following system of ordinary differential equations:\n$$\\dot{I}_j(t)=-\\sum_{k\\neq j}^{J} \\lambda^I_{jk}\\left({\\bf{I,S}}\\right) \\cdot I_j + \\sum_{k=1}^{J}\\beta_{kj} \\cdot I_k\\cdot S_j + \\sum_{k\\neq j}^{J} \\lambda^I_{kj}\\left({\\bf{I,S}}\\right)\\cdot I_k \\qquad (j=1,2,\\dots,J), $$ $$ \\dot{S}_j(t)=-\\sum_{k\\neq j}^{J}\\lambda^S_{jk}\\left({\\bf{I,S}}\\right) \\cdot S_j - \\sum_{k=1}^{J}\\beta_{kj} \\cdot I_k \\cdot S_j + \\sum_{k\\neq j}^{J}\\lambda^S_{kj}\\left({\\bf{I,S}}\\right) \\cdot S_k \\qquad (j=1,2,\\dots,J). $$\nWe now create a set of clustered epidemiological differential equations for the given mobility and communicatoin networks. The number of variables and the total number of differential equations are $2J $ each (recall that $J $ is the total number of clusters). The $2J $-dimensional vector $(y_1,y_2,\u0026hellip;,y_J; y_{J+1},y_{J+2},\u0026hellip;,y_{2J})=(I_1,I_2,\u0026hellip;,I_J; S_1,S_2,\u0026hellip;,S_J) $ represent the instantaneous state of the system, semicolon and extra spacing have been added merely for visual separation of informed and non-informed vehicular counts in the various clusters.\nWe create the first summation term on right hand side The first summation terms on the RHS of the $j $ -th equation ($ \\dot{I}_j $) and the $J+j $ -th equation $(\\dot{S}_j) $ is related to the outgoing mobility from cluster $j $.\nmob.out.text\u0026lt;-vector(mode='character',length=total.clusters*2) for(i in 1:total.clusters){ mob.out.text.temp.1\u0026lt;-c(); mob.out.text.temp.2\u0026lt;-c(); mob.out.text.temp.3\u0026lt;-c(); mob.out.text.temp.4\u0026lt;-c() for(j in 1:length(mob.edge.out[[i]])){ mob.out.text.temp.1\u0026lt;-paste(\u0026quot;- \u0026quot;,mob.edge.out.rate[[i]][j],\u0026quot;*y[\u0026quot;,i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.out.text.temp.2\u0026lt;-paste(mob.out.text.temp.2,mob.out.text.temp.1,sep=\u0026quot; \u0026quot;) mob.out.text.temp.3\u0026lt;-paste(\u0026quot;- \u0026quot;,mob.edge.out.rate[[i]][j],\u0026quot;*y[\u0026quot;, total.clusters+i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.out.text.temp.4\u0026lt;-paste(mob.out.text.temp.4,mob.out.text.temp.3,sep=\u0026quot; \u0026quot;) } mob.out.text[i]\u0026lt;-mob.out.text.temp.2 mob.out.text[total.clusters+i]\u0026lt;-mob.out.text.temp.4 }  head(mob.out.text) #View(the first summation term on the RHS of each differential equation)  ## [1] \u0026quot; - 0.025*y[1] - 0.025*y[1]\u0026quot; ## [2] \u0026quot; - 0.025*y[2] - 0.025*y[2]\u0026quot; ## [3] \u0026quot; - 0.025*y[3] - 0.025*y[3]\u0026quot; ## [4] \u0026quot; - 0.025*y[4] - 0.025*y[4]\u0026quot; ## [5] \u0026quot; - 0.05*y[5]\u0026quot; ## [6] \u0026quot; - 0.01666666665*y[6] - 0.01666666665*y[6] - 0.01666666665*y[6]\u0026quot;  We create the second summation term on right hand side The second summation terms on the RHS of the $j $ -th equation ($ \\dot{I}_j $) and the $J+j $ -th equation $(\\dot{S}_j) $ is related to the intra- and inter-communication in cluster $j $.\ncomm.text\u0026lt;-vector(mode='character',length=total.clusters*2) for(i in 1:total.clusters){ comm.text.temp.1\u0026lt;-c(); comm.text.temp.2\u0026lt;-c(); comm.text.temp.3\u0026lt;-c(); comm.text.temp.4\u0026lt;-c() for(j in 1:length(comm.edge[[i]])){ comm.text.temp.1\u0026lt;-paste(comm.edge.rate[[i]][j],\u0026quot;*y[\u0026quot;,comm.edge[[i]][j],\u0026quot;]*y[\u0026quot;, total.clusters+i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) comm.text.temp.2\u0026lt;-paste(comm.text.temp.2,\u0026quot; + \u0026quot;,comm.text.temp.1,sep=\u0026quot;\u0026quot;) comm.text.temp.3\u0026lt;-paste(comm.edge.rate[[i]][j],\u0026quot;*y[\u0026quot;,comm.edge[[i]][j],\u0026quot;]*y[\u0026quot;, total.clusters+i,\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) comm.text.temp.4\u0026lt;-paste(comm.text.temp.4,\u0026quot; - \u0026quot;,comm.text.temp.3,sep=\u0026quot;\u0026quot;) } comm.text[i]\u0026lt;-comm.text.temp.2 comm.text[total.clusters+i]\u0026lt;-comm.text.temp.4 }  head(comm.text) #View(the second summation term on the RHS of each differential equation)  ## [1] \u0026quot; + 10*y[1]*y[121] + 10*y[61]*y[121]\u0026quot; \u0026quot; + 10*y[2]*y[122] + 10*y[62]*y[122]\u0026quot; ## [3] \u0026quot; + 10*y[3]*y[123] + 10*y[63]*y[123]\u0026quot; \u0026quot; + 10*y[4]*y[124] + 10*y[64]*y[124]\u0026quot; ## [5] \u0026quot; + 10*y[5]*y[125] + 10*y[65]*y[125]\u0026quot; \u0026quot; + 10*y[6]*y[126] + 10*y[66]*y[126]\u0026quot;  We create the third summation term on right hand side The third summation terms on the RHS of the $j $ -th equation ($ \\dot{I}_j $) and the $J+j $ -th equation $(\\dot{S}_j) $ is related to the incoming mobility to cluster $j $\nmob.in.text\u0026lt;-vector(mode='character',length=total.clusters*2) for(i in 1:total.clusters){ mob.in.text.temp.1\u0026lt;-c(); mob.in.text.temp.2\u0026lt;-c(); mob.in.text.temp.3\u0026lt;-c(); mob.in.text.temp.4\u0026lt;-c() for(j in 1:length(mob.edge.in[[i]])){ mob.in.text.temp.1\u0026lt;-paste(mob.edge.in.rate[[i]][j],\u0026quot;*y[\u0026quot;, mob.edge.in[[i]][j],\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.in.text.temp.2\u0026lt;-paste(mob.in.text.temp.2,\u0026quot; + \u0026quot;,mob.in.text.temp.1,sep=\u0026quot; \u0026quot;) mob.in.text.temp.3\u0026lt;-paste(mob.edge.in.rate[[i]][j],\u0026quot;*y[\u0026quot;, total.clusters+mob.edge.in[[i]][j],\u0026quot;]\u0026quot;, sep=\u0026quot;\u0026quot;) mob.in.text.temp.4\u0026lt;-paste(mob.in.text.temp.4,\u0026quot; + \u0026quot;,mob.in.text.temp.3,sep=\u0026quot; \u0026quot;) } mob.in.text[i]\u0026lt;-mob.in.text.temp.2 mob.in.text[total.clusters+i]\u0026lt;-mob.in.text.temp.4 }  head(mob.in.text) #View(the third summation term on the RHS of each differential equation)  ## [1] \u0026quot; + 0.05*y[91]\u0026quot; \u0026quot; + 0.025*y[1] + 0.025*y[96]\u0026quot; ## [3] \u0026quot; + 0.025*y[2] + 0.025*y[101]\u0026quot; \u0026quot; + 0.025*y[3] + 0.025*y[106]\u0026quot; ## [5] \u0026quot; + 0.025*y[4] + 0.025*y[111]\u0026quot; \u0026quot; + 0.025*y[31] + 0.025*y[92]\u0026quot;  We now combine the all terms to create the complete set of differential equations\ndy\u0026lt;-vector(mode='character',length=total.clusters*2) for (i in 1:(total.clusters*2)) { dy[i]\u0026lt;-paste(\u0026quot;dy\u0026quot;,i,\u0026quot; \u0026lt;- \u0026quot;,mob.out.text[i],mob.in.text[i],comm.text[i],sep=\u0026quot;\u0026quot;) }  head(dy) # View(complete set of differential equations)  ## [1] \u0026quot;dy1 \u0026lt;- - 0.025*y[1] - 0.025*y[1] + 0.05*y[91] + 10*y[1]*y[121] + 10*y[61]*y[121]\u0026quot; ## [2] \u0026quot;dy2 \u0026lt;- - 0.025*y[2] - 0.025*y[2] + 0.025*y[1] + 0.025*y[96] + 10*y[2]*y[122] + 10*y[62]*y[122]\u0026quot; ## [3] \u0026quot;dy3 \u0026lt;- - 0.025*y[3] - 0.025*y[3] + 0.025*y[2] + 0.025*y[101] + 10*y[3]*y[123] + 10*y[63]*y[123]\u0026quot; ## [4] \u0026quot;dy4 \u0026lt;- - 0.025*y[4] - 0.025*y[4] + 0.025*y[3] + 0.025*y[106] + 10*y[4]*y[124] + 10*y[64]*y[124]\u0026quot; ## [5] \u0026quot;dy5 \u0026lt;- - 0.05*y[5] + 0.025*y[4] + 0.025*y[111] + 10*y[5]*y[125] + 10*y[65]*y[125]\u0026quot; ## [6] \u0026quot;dy6 \u0026lt;- - 0.01666666665*y[6] - 0.01666666665*y[6] - 0.01666666665*y[6] + 0.025*y[31] + 0.025*y[92] + 10*y[6]*y[126] + 10*y[66]*y[126]\u0026quot;  dy_name\u0026lt;-c() for (i in 1:(total.clusters*2)) { if(i==1){dy_name\u0026lt;-paste(dy_name,\u0026quot;list(c(dy1\u0026quot;,sep=\u0026quot;\u0026quot;)} else if(i==(total.clusters*2)){dy_name\u0026lt;-paste(dy_name,\u0026quot;,dy\u0026quot;,total.clusters*2,\u0026quot;))}\u0026quot;,sep=\u0026quot;\u0026quot;)} else{dy_name\u0026lt;-paste(dy_name,\u0026quot;,\u0026quot;,paste(\u0026quot;dy\u0026quot;,i,sep=\u0026quot;\u0026quot;),sep=\u0026quot;\u0026quot;)} } set.diff.eqn\u0026lt;-c(\u0026quot;f \u0026lt;- function(t, y, parms) {\u0026quot;,dy,dy_name) write(set.diff.eqn, file = \u0026quot;set_diff_eqn.R\u0026quot;) source(\u0026quot;set_diff_eqn.R\u0026quot;)  Solving Differential Equations Initial condition We import preset initial conditions.\n# import preset initial condition initial_condition\u0026lt;-read.csv(\u0026quot;initial-condition.csv\u0026quot;, header=T, as.is=T) # initial condition: 2J-dimensional vector yini\u0026lt;-c(initial_condition$I_ini,initial_condition$S_ini)  The $2J $ -dimensional vector y_ini represent the state of the system at initial time.\nSolution of differential equations We create a function to encode the set of differential equations in a form suitable for use as the func argument to ode (numerical methods provided by the deSolve package).\nBefore we run, we need to set what are the timestamps used. times denote time sequence for which output is wanted.\nThe example below shows that the result will be generated every step.size=1 time unit, from 0 to sim.time=100 units.\nsim.time\u0026lt;-100 step.size\u0026lt;-1 times \u0026lt;- seq(from = 0, to = sim.time, by = step.size) # output wanted at these time intervals print(times)  ## [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## [19] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ## [37] 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 ## [55] 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 ## [73] 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 ## [91] 90 91 92 93 94 95 96 97 98 99 100  We then compute the fracton of informed vehicles over space and time by applying all into the ODE solver:\nout \u0026lt;- ode(times = times, y=yini, func = f, parms = NULL) # numerically solve the set of # differential equations solution\u0026lt;-out[,-1] rownames(solution)\u0026lt;-times # fraction of informed vehicles per cluster frac.inf.clust\u0026lt;-solution[,1:total.clusters] # fraction of non-informed vehicles per cluster frac.non.inf.clust\u0026lt;-solution[,(1+total.clusters):(2*total.clusters)] colnames(frac.non.inf.clust)\u0026lt;-1:total.clusters write.table(frac.inf.clust, file = \u0026quot;fraction_of_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file. write.table(frac.non.inf.clust, file = \u0026quot;fraction_of_non_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file.  Row names and Column names of frac.inf.clust and frac.non.inf.clust represent time and cluster respectively. For example, frac.inf.clust[rownames(frac.inf.clust)==10,25] (frac.non.inf.clust[rownames(frac.non.inf.clust)==10,25]) gives the fraction of informed (non-informed) vehicles at $t=10 $ in cluster 25. Naturally, multiplying the matrix frac.inf.clust (frac.non.inf.clust) by the total number of vehicles yields the number of informed (non-informed) vehicles in a given cluster at a given time.\nhead(frac.inf.clust[,1:5]) # View(fraction of informed vehicles at a given time in each cluster)  ## 1 2 3 4 5 ## 0 0.0008333330 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## 1 0.0008570283 2.153502e-05 2.742762e-07 3.458794e-09 4.070297e-11 ## 2 0.0008866241 4.467211e-05 1.129462e-06 2.138115e-08 3.472434e-10 ## 3 0.0009224916 6.983034e-05 2.639884e-06 7.020836e-08 1.509739e-09 ## 4 0.0009649812 9.741283e-05 4.886947e-06 1.667595e-07 4.435826e-09 ## 5 0.0010145891 1.280043e-04 8.000834e-06 3.369939e-07 1.088772e-08  We export the results to csv files in the current workspace.\nwrite.table(frac.inf.clust, file = \u0026quot;fraction_of_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file. write.table(frac.non.inf.clust, file = \u0026quot;fraction_of_non_informed_vehicles_per_cluster.csv\u0026quot;, row.names=TRUE,col.names=TRUE, sep=\u0026quot;,\u0026quot;) # export a matrix to a file.  Generating Figures Fraction of overall informed vehicles over time To study the degree of information propagation, we plot the fraction of overall vehicles that are informed at time t. A value of 1 on the y axis indicates that all vehicles in the system receive messages via V2V communication.\nfrac.inf.veh\u0026lt;-rowSums(solution[,1:total.clusters]) # fraction of overall vehicles # that are informed over time. plot(times,frac.inf.veh, xlab=\u0026quot;Time\u0026quot;, ylab=\u0026quot;Fraction of informed vehicles\u0026quot;)  Fraction of informed and non-informed vehicles over time per cluster\ncluster.specific\u0026lt;-10 # determine the specific cluster of interest. # fraction of informed vehicles over time in the particular cluster. frac.inf.veh.clust\u0026lt;-frac.inf.clust[,cluster.specific] # fraction of non-informed vehicles over time in the particular cluster. frac.non.inf.veh.clust\u0026lt;-frac.non.inf.clust[,cluster.specific] plot(times, frac.inf.veh.clust, xlab=\u0026quot;Time\u0026quot;, col=\u0026quot;black\u0026quot;, ylab=paste(\u0026quot;Fraction of (non)informed vehicles in cluster \u0026quot;,cluster.specific,sep = \u0026quot;\u0026quot;)) par(new=T) plot(times, frac.non.inf.veh.clust, xlab='', ylab='', col=\u0026quot;red\u0026quot;, axes=F) par(new=F) legend(0, 0.0025, legend=c(\u0026quot;Infomred\u0026quot;,\u0026quot;Non-infomred\u0026quot;), pch = c(1, 1), col=c(\u0026quot;black\u0026quot;,\u0026quot;red\u0026quot;))  ","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"034c579b06a174f89b1afea8a22b9d94","permalink":"https://jungyeol-kim.github.io/project/v2v/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/project/v2v/","section":"project","summary":"An example of using the in-built project page.","tags":["R","V2V","Network"],"title":"Vehicular Messaging Simulation 2","type":"project"},{"authors":null,"categories":null,"content":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you\u0026rsquo;ll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head() ```  renders as\nimport pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head()  Charts Academic supports the popular Plotly chart format.\nSave your Plotly JSON in your page folder, for example chart.json, and then add the {{\u0026lt; chart data=\u0026quot;chart\u0026quot; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\n  (function() { let a = setInterval( function() { if ( typeof window.Plotly === 'undefined' ) { return; } clearInterval( a ); Plotly.d3.json(\"./line-chart.json\", function(chart) { Plotly.plot('chart-792483165', chart.data, chart.layout, {responsive: true}); }); }, 500 ); })();  You might also find the Plotly JSON Editor useful.\nMath Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file.\nTo render inline or block math, wrap your LaTeX math with $...$ or $$...$$, respectively.\nExample math block:\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$  renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left |\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right |^2}$$\nExample inline math $\\nabla F(\\mathbf{x}_{n})$ renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the \\\\\\\\ math linebreak:\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$  renders as\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\n1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ```  renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2]  An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ```  renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!  An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```  renders as\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d  An example class diagram:\n```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() }  An example state diagram:\n```mermaid stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] ```  renders as\nstateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*]  Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else  renders as\n Write math example Write diagram example Do something else  Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |  renders as\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    Callouts Academic supports a shortcode for callouts, also referred to as asides, hints, or alerts. By wrapping a paragraph in {{% callout note %}} ... {{% /callout %}}, it will render as an aside.\n{{% callout note %}} A Markdown aside is useful for displaying notices, hints, or definitions to your readers. {{% /callout %}}  renders as\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   Spoilers Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.\n{{\u0026lt; spoiler text=\u0026quot;Click to view the spoiler\u0026quot; \u0026gt;}} You found me! {{\u0026lt; /spoiler \u0026gt;}}  renders as\nClick to view the spoiler You found me!\n Icons Academic enables you to use a wide range of icons from Font Awesome and Academicons in addition to emojis.\nHere are some examples using the icon shortcode to render icons:\n{{\u0026lt; icon name=\u0026quot;terminal\u0026quot; pack=\u0026quot;fas\u0026quot; \u0026gt;}} Terminal {{\u0026lt; icon name=\u0026quot;python\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} Python {{\u0026lt; icon name=\u0026quot;r-project\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} R  renders as\n  Terminal\n Python\n R\nDid you find this page helpful? Consider sharing it üôå ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://jungyeol-kim.github.io/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Academic","type":"post"},{"authors":["Jungyeol Kim"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://jungyeol-kim.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Jungyeol Kim"],"categories":[],"content":"from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')     print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb  The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post's title date: 2019-09-01 # Put any other Academic metadata here... ---  Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.  Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://jungyeol-kim.github.io/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://jungyeol-kim.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://jungyeol-kim.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://jungyeol-kim.github.io/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Jungyeol Kim","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://jungyeol-kim.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Jungyeol Kim","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://jungyeol-kim.github.io/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://jungyeol-kim.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]